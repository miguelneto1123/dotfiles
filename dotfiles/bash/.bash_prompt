#!/bin/bash

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

_prompt_git() {
	local s='';
	local branchName='';

	# Check if the current directory is in a Git repository.
	git rev-parse --is-inside-work-tree &>/dev/null || return;

	# Check for what branch we’re on.
	# Get the short symbolic ref. If HEAD isn’t a symbolic ref, get a
	# tracking remote branch or tag. Otherwise, get the
	# short SHA for the latest commit, or give up.
	branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
		git describe --all --exact-match HEAD 2> /dev/null || \
		git rev-parse --short HEAD 2> /dev/null || \
		echo '(unknown)')";

	# Early exit for Chromium & Blink repo, as the dirty check takes too long.
	# Thanks, @paulirish!
	# https://github.com/paulirish/dotfiles/blob/dd33151f/.bash_prompt#L110-L123
	repoUrl="$(git config --get remote.origin.url)";
	if grep -q 'chromium/src.git' <<< "${repoUrl}"; then
		s+='*';
	else
		# Check for uncommitted changes in the index.
		if ! $(git diff --quiet --ignore-submodules --cached); then
			s+='+';
		fi;
		# Check for unstaged changes.
		if ! $(git diff-files --quiet --ignore-submodules --); then
			s+='!';
		fi;
		# Check for untracked files.
		if [ -n "$(git ls-files --others --exclude-standard)" ]; then
			s+='?';
		fi;
		# Check for stashed files.
		if $(git rev-parse --verify refs/stash &>/dev/null); then
			s+='$';
		fi;
	fi;

	[ -n "${s}" ] && s=" [${s}]";

	echo -e "${1}(${branchName})${2}${s}";
}

if [ "$color_prompt" = yes ]; then
    if tput setaf 1 &> /dev/null; then
        tput sgr0; # reset colors
        bold=$(tput bold);
        reset=$(tput sgr0);
        # Solarized colors, taken from http://git.io/solarized-colors.
        black=$(tput setaf 0);
        blue=$(tput setaf 33);
        cyan=$(tput setaf 37);
        green=$(tput setaf 64);
        orange=$(tput setaf 166);
        purple=$(tput setaf 125);
        red=$(tput setaf 124);
        violet=$(tput setaf 61);
        white=$(tput setaf 15);
        yellow=$(tput setaf 136);
    else
        bold='';
        reset="\e[0m";
        black="\e[1;30m";
        red="\e[1;31m";
        green="\e[1;32m";
        yellow="\e[1;33m";
        orange="\e[33m";
        blue="\e[1;34m";
        violet="\e[1;35m";
        purple="\e[35m";
        cyan="\e[1;36m";
        white="\e[1;37m";
    fi;

    # Check if root to color user differently
    if [ "`id -u`" -eq 0 ]; then
        user=$red
    else
        user=$orange
    fi;

    # Check if SSH to color host differently
    if [[ $SSH_TTY ]]; then
        host=$red
    else
        host=$yellow
    fi;

    # PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\W\[\033[00m\]\$ '
    PS1="${debian_chroot:+($debian_chroot)}" # In case of chroot
    PS1+="\[$bold\]\[$user\]\u" # user
    PS1+="\[$white\]@" # at
    PS1+="\[$host\]\h" # host
    PS1+="\[$white\]:" # in
    PS1+="\[$green\]\W" # current directory (only the dir name)
    # Git repository details
    PS1+="\$(_prompt_git \"\[${violet}\] \" \"\[${blue}\]\")"
    PS1+="\n\[$white\]" # newline
    PS1+='\$ ' # using '' to escape to # when root and $ when not
    PS1+="\[$reset\]" # reset colors for input
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\W\$ '
fi
unset color_prompt bold reset black white
unset red green yellow orange blue violet purple cyan white

# If this is an xterm set the window title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

export PS1